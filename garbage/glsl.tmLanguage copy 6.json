{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "GLSL",
	"foldingStartMarker": "/\\*\\*|\\{\\s*$",
	"foldingStopMarker": "\\*\\*/|^\\s*\\}",
	"scopeName": "source.glsl",
	"patterns": [
		{
			"include": "#translation-unit"
		}
	],
	"repository": {
		"variable-identifier": {
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
		},

		"constant-int": {
			"name": "constant.numeric.int-constant.glsl",
			"match": "\\b(0[xX][0-9A-Fa-f]+|\\d+)\\b"
		},

		"constant-uint": {
			"name": "constant.numeric.uint-constant.glsl",
			"match": "\\b(0[xX][0-9A-Fa-f]+[uU]|\\d+[uU])\\b"
		},

		"constant-float": {
			"match": "\\b((?:\\d+\\.\\d+|\\d+\\.|\\.\\d+)(?:[eE][-+]?\\d+)?(?:f|F))",
			"captures": {"1": {"name": "constant.numeric.float-constant.glsl"}}
		},

		"constant-bool": {
			"name": "constant.numeric.bool-constant.glsl",
			"match": "\\b(true|false)\\b"
		},

		"constant-double": {
			"match": "\\b((?:\\d+\\.\\d+|\\d+\\.|\\.\\d+)(?:[eE][-+]?\\d+)?(?:lf|LF)?)",
			"captures": {"1": {"name": "constant.numeric.double-constant.glsl"}}
		},

		"primary-expression": {
			"patterns": [
				{"include": "#variable-identifier"},
				{"include": "#constant-int"},
				{"include": "#constant-uint"},
				{"include": "#constant-float"},
				{"include": "#constant-bool"},
				{"include": "#constant-double"},
				{
					"begin": "\\(",
					"beginCaptures": {"0": {"name": "punctuation.section.parameters.begin.bracket.round.glsl"}},
					"end": "\\)",
					"endCaptures": {"0": {"name": "punctuation.section.parameters.end.bracket.round.glsl"}}
				}
			]
		},

		"postfix-expression": {
			"patterns": [
				{"include": "#primary-expression"},
				{
					"include": "#postfix-expression",
					"patterns": [
						{
							"begin": "\\{",
							"beginCaptures": {"0": {"name": "punctuation.section.block.begin.bracket.curly.glsl"}},
							"end": "\\}",
							"endCaptures": {"0": {"name": "punctuation.section.block.end.bracket.curly.glsl"}}
						}	
					]
				}
			]
		},

		"integer-expression": {

		},

		"function-call": {
			"patterns": [
				{"include": "#function-call-or-method"}
			]

		},

		"function-call-or-method": {
			"patterns": [
				{"include": "#function-call-generic"}
			]
		},

		"function-call-generic": {
			"patterns": [
				{"include": "#function-call-header-with-parameters"},
				{"include": "#function-call-header-no-parameters"}
			]
		},

		"function-call-header-no-parameters": {

		},

		"function-call-header-with-parameters": {

		},

		"function-call-header": {

		},

		"function-identifier": {

		},

		"unary-expression": {

		},

		"unary-operator": {

		},

		"multiplicative-expression": {

		},

		"additive-expression": {

		},

		"shift-expression": {

		},

		"relational-expression": {

		},

		"equality-expression": {

		},

		"and-expression": {

		},

		"exclusive-or-expression": {

		},

		"inclusive-or-expression": {

		},

		"logical-and-expression": {

		},

		"logical-xor-expression": {

		},

		"logical-or-expression": {

		},

		"conditional-expression": {

		},

		"assignment-expression": {

		},

		"assignment-operator": {

		},

		"expression": {

		},

		"constant-expression": {

		},

		"declaration": {

		},

		"identifier-list": {

		},

		"function-prototype": {

		},

		"function-declarator": {

		},

		"function-header-with-parameters": {

		},

		"function-header": {

		},

		"parameter-declarator": {

		},

		"parameter-declaration": {

		},

		"parameter-type-specifier": {

		},

		"init-declarator-list": {

		},

		"single-declaration": {

		},

		"fully-specified-type": {

		},

		"invariant-qualifier": {

		},

		"interpolation-qualifier": {

		},

		"layout-qualifier": {

		},

		"layout-qualifier-id-list": {

		},

		"layout-qualifier-id": {

		},

		"precise-qualifier": {

		},

		"type-qualifier": {

		},

		"single-type-qualifier": {

		},

		"storage-qualifier": {

		},

		"type-name-list": {

		},

		"type-specifier": {

		},

		"array-specifier": {

		},

		"type-specifier-nonarray": {

		},

		"precision-qualifier": {

		},

		"struct-specifier": {

		},

		"struct-declaration-list": {

		},

		"struct-declaration": {

		},

		"struct-declarator-list": {

		},

		"struct-declarator": {

		},

		"initializer": {

		},

		"initializer-list": {

		},

		"declaration-statement": {

		},

		"statement": {

		},

		"simple-statement": {

		},

		"compound-statement": {

		},

		"statement-no-new-scope": {

		},

		"compound-statement-no-new-scope": {

		},

		"statement-list": {

		},

		"expression-statement": {

		},

		"selection-statement": {

		},

		"selection-rest-statement": {

		},

		"condition": {

		},

		"switch-statement": {

		},

		"switch-statement-list": {

		},

		"case-label": {

		},

		"iteration-statement": {

		},

		"for-init-statement": {

		},

		"conditionopt": {

		},

		"for-rest-statement": {

		},

		"jump-statement": {

		},

		"translation-unit": {
			"contentName": "meta.translation-unit.glsl",
			"begin": "",
			"end": "",
			"patterns": [
				{"include": "#external-declaration"}
			]
		},

		"external-declaration": {
			"contentName": "meta.external-declaration.glsl",
			"patterns": [
				{"include": "#function-definition"},
				{"include": "#declaration"},
				{
					"name": "meta.semicolon",
					"match": ";"
				}
			]
		},

		"function-definition": {
			"include": "#function-prototype",
			"patterns": [
				{
					"include": "#compound-statement-no-new-scope"
				}
			]
		}
	}	
}